return(list(
main_matrix_plot = main_matrix_plot,
legend = legend
))
}
# So the checkmarks show up in the plot:
showtext_auto()
# Generate main plot without legend
main_plot <- generate.urobiome.plot.with.matrix(
df_renormalized_subset,
incorrect_patients,
75000,
reads.meta.counts
)
pred.df <- venn.df
provide.grouping <- function(MT_HR, MT_Tax, Clin_HR, Clin_Tax) {
comb <- paste0(MT_HR, MT_Tax, Clin_HR, Clin_Tax)
# Define meaningful labels for each combination
group_labels <- list(
"1111" = "All_Positive",
"0000" = "All_Negative",
"1110" = "Clin_Tax_Negative",
"1101" = "Clin_HR_Negative",
"1011" = "MT_Tax_Negative",
"0111" = "MT_HR_Negative",
"1100" = "Clin_Tax_HR_Negative",
"1010" = "MT_Tax_Clin_Tax_Negative",
"1001" = "MT_Tax_Clin_HR_Negative",
"0110" = "MT_HR_Clin_Tax_Negative",
"0101" = "MT_HR_Clin_HR_Negative",
"0011" = "MT_HR_MT_Tax_Negative",
"1000" = "Only_MT_HR_Positive",
"0100" = "Only_MT_Tax_Positive",
"0010" = "Only_Clin_HR_Positive",
"0001" = "Only_Clin_Tax_Positive"
)
# Return the appropriate label or NA if not found
return(group_labels[[comb]])
}
# Apply function to all rows, giving a string value for each
pred.df$group <- mapply(provide.grouping,
pred.df[ , 1],
pred.df[ , 2],
pred.df[ , 3],
pred.df[ , 4])
# Working with df_renormalized, FYI
incorrect_patients <- rownames(pred.df[pred.df$group != "All_Negative" &
pred.df$group != "All_Positive", ])
df_renormalized_subset <- df_renormalized[incorrect_patients , ]
# Function that will generate a urobiome plot on this new df
generate.urobiome.plot.with.matrix <- function(rpm, patients, rpm.threshold, metadata) {
require(ggplot2)
require(reshape2)
require(cowplot)
require(dplyr)
require(RColorBrewer)
# 1. Subset RPM matrix
rpm.subsetted <- rpm[patients, ]
# 2. Re-make the function but inputting
sum.above.thres <- function(rpm.df, rpm.threshold = 1000) {
# Initialize list to store results
result_list <- list()
for (i in seq_len(nrow(rpm.df))) {
patient_name <- rownames(rpm.df)[i]
current.row <- rpm.df[i, ]
# Keep taxa above threshold
patients.above <- unlist(current.row)[unlist(current.row) >= rpm.threshold]
sum.rpm.above <- sum(patients.above)
sum.rpm.below <- 1e6 - sum.rpm.above
# Add "other" category
patients.above <- c(patients.above, "other" = sum.rpm.below)
# Safety check
if (abs(sum(patients.above) - 1e6) > 1) stop("RPM must sum to 1 million!")
# Normalize to proportions
patients.above <- patients.above / sum(patients.above)
# Store as a data frame row
result_list[[patient_name]] <- as.data.frame(t(patients.above), check.names = FALSE)
}
# Combine all rows into a single data frame
result_df <- bind_rows(result_list, .id = "patient")
return(result_df)
}
stacked_bar_data <- sum.above.thres(rpm, rpm.threshold = rpm.threshold)
# 3. Melt into long dataframe for plotting
# stacked_bar_data <- stacked_bar_data %>%
#   rename_with(~ "Patient", .cols = "patient")  # rename 'patient' column to 'Patient'
plot_data <- stacked_bar_data %>%
rename_with(~ "Patient", .cols = "patient") %>%
reshape2::melt(id.vars = "Patient", variable.name = "Taxa", value.name = "Abundance") %>%
filter(!is.na(Abundance)) %>%
group_by(Patient) %>%
mutate(Abundance = Abundance / sum(Abundance)) %>%
ungroup()
View(plot_data)
temp_pred_df <- pred.df
temp_pred_df$Patient <- rownames(temp_pred_df)
plot_data <- plot_data %>%
left_join(temp_pred_df, by = "Patient")
View(plot_data)
# # Reorder by pred.df$group
# patient_order <- pred.df[order(pred.df$group), ]
# matched <- match(as.character(patient_order), as.character(plot_data$Patient)
# plot_data <- plot_data[matched , ]
# 4. Color setup - ensure we're using the actual taxa names
taxa_list <- setdiff(unique(as.character(plot_data$Taxa)), "other")
other_colors <- colorRampPalette(brewer.pal(12, "Set3"))(length(taxa_list))
fill_colours <- c("other" = "grey", setNames(other_colors, taxa_list))
# 5. Main plot with full legend
p_main_full <- ggplot(plot_data, aes(x = Patient, y = Abundance, fill = Taxa)) +
geom_bar(stat = "identity", width = 0.7) +
coord_flip() +
scale_fill_manual(values = fill_colours, name = "Taxa") +
labs(x = "Patient", y = "Proportion of Non-Human Reads") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
# 6. Extract the legend before removing it
legend <- cowplot::get_legend(p_main_full +
theme(legend.position = "right",
legend.text = element_text(size = 8)))
# 7. Remove legend from main plot
p_main <- p_main_full + theme(legend.position = "none")
# 8. Test result matrix
test_long_names <- c(
"MT_HR" = "RNA-seq\nHost\nResponse",
"MT_Tax" = "RNA-seq\nPathogen\nAbundance",
"Clin_HR" = "Clinical\nHost\nResponse",
"Clin_Tax" = "Clinical\nPathogen\nAbundance"
)
test_results <- data.frame(
Patient = factor(patients, levels = patients),
MT_HR = pred.df[patients, "RNA-Seq Host Response Cluster"],
MT_Tax = pred.df[patients, "RNA-Seq Pathogen Abundance"],
Clin_HR = pred.df[patients, "Clinical Host Response Score"],
Clin_Tax = pred.df[patients, "Clinical Pathogen Abundance"],
stringsAsFactors = FALSE
) %>%
reshape2::melt(id.vars = "Patient", variable.name = "Test", value.name = "Status")
p_matrix <- ggplot(test_results, aes(x = Test, y = Patient)) +
geom_text(aes(label = ifelse(Status == 1, "âœ“", "x"),
color = factor(Status)),
size = 4) +
scale_color_manual(values = c("0" = "red", "1" = "darkgreen")) +
scale_x_discrete(position = "top", labels = test_long_names) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9),
legend.position = "none"
)
# 9. Align and combine both plots
aligned_plots <- align_plots(p_main, p_matrix, align = "hv", axis = "lr")
main_matrix_plot <- plot_grid(
aligned_plots[[1]],
aligned_plots[[2]],
nrow = 1,
rel_widths = c(3, 3),
align = "h",
axis = "tb"
)
# 10. Return both combined plot and legend
return(list(
main_matrix_plot = main_matrix_plot,
legend = legend
))
}
# So the checkmarks show up in the plot:
showtext_auto()
# Generate main plot without legend
main_plot <- generate.urobiome.plot.with.matrix(
df_renormalized_subset,
incorrect_patients,
75000,
reads.meta.counts
)
# Print the main plot
print(main_plot$main_matrix_plot)
# Print the legend separately
grid::grid.newpage()
grid::grid.draw(main_plot$legend)
order(pred.df$group)
pred.df[ order(pred.df$group) , ]
pred.df <- venn.df
provide.grouping <- function(MT_HR, MT_Tax, Clin_HR, Clin_Tax) {
comb <- paste0(MT_HR, MT_Tax, Clin_HR, Clin_Tax)
# Define meaningful labels for each combination
group_labels <- list(
"1111" = "All_Positive",
"0000" = "All_Negative",
"1110" = "Clin_Tax_Negative",
"1101" = "Clin_HR_Negative",
"1011" = "MT_Tax_Negative",
"0111" = "MT_HR_Negative",
"1100" = "Clin_Tax_HR_Negative",
"1010" = "MT_Tax_Clin_Tax_Negative",
"1001" = "MT_Tax_Clin_HR_Negative",
"0110" = "MT_HR_Clin_Tax_Negative",
"0101" = "MT_HR_Clin_HR_Negative",
"0011" = "MT_HR_MT_Tax_Negative",
"1000" = "Only_MT_HR_Positive",
"0100" = "Only_MT_Tax_Positive",
"0010" = "Only_Clin_HR_Positive",
"0001" = "Only_Clin_Tax_Positive"
)
# Return the appropriate label or NA if not found
return(group_labels[[comb]])
}
# Apply function to all rows, giving a string value for each
pred.df$group <- mapply(provide.grouping,
pred.df[ , 1],
pred.df[ , 2],
pred.df[ , 3],
pred.df[ , 4])
# Working with df_renormalized, FYI
incorrect_patients <- rownames(pred.df[pred.df$group != "All_Negative" &
pred.df$group != "All_Positive", ])
df_renormalized_subset <- df_renormalized[incorrect_patients , ]
# Function that will generate a urobiome plot on this new df
generate.urobiome.plot.with.matrix <- function(rpm, patients, rpm.threshold, metadata) {
require(ggplot2)
require(reshape2)
require(cowplot)
require(dplyr)
require(RColorBrewer)
# 1. Subset RPM matrix
rpm.subsetted <- rpm[patients, ]
# 2. Re-make the function but inputting
sum.above.thres <- function(rpm.df, rpm.threshold = 1000) {
# Initialize list to store results
result_list <- list()
for (i in seq_len(nrow(rpm.df))) {
patient_name <- rownames(rpm.df)[i]
current.row <- rpm.df[i, ]
# Keep taxa above threshold
patients.above <- unlist(current.row)[unlist(current.row) >= rpm.threshold]
sum.rpm.above <- sum(patients.above)
sum.rpm.below <- 1e6 - sum.rpm.above
# Add "other" category
patients.above <- c(patients.above, "other" = sum.rpm.below)
# Safety check
if (abs(sum(patients.above) - 1e6) > 1) stop("RPM must sum to 1 million!")
# Normalize to proportions
patients.above <- patients.above / sum(patients.above)
# Store as a data frame row
result_list[[patient_name]] <- as.data.frame(t(patients.above), check.names = FALSE)
}
# Combine all rows into a single data frame
result_df <- bind_rows(result_list, .id = "patient")
return(result_df)
}
stacked_bar_data <- sum.above.thres(rpm, rpm.threshold = rpm.threshold)
# 3. Melt into long dataframe for plotting
# stacked_bar_data <- stacked_bar_data %>%
#   rename_with(~ "Patient", .cols = "patient")  # rename 'patient' column to 'Patient'
plot_data <- stacked_bar_data %>%
rename_with(~ "Patient", .cols = "patient") %>%
reshape2::melt(id.vars = "Patient", variable.name = "Taxa", value.name = "Abundance") %>%
filter(!is.na(Abundance)) %>%
group_by(Patient) %>%
mutate(Abundance = Abundance / sum(Abundance)) %>%
ungroup()
temp_pred_df <- pred.df
temp_pred_df$Patient <- rownames(temp_pred_df)
plot_data <- plot_data %>%
left_join(temp_pred_df, by = "Patient")
# Reorder by pred.df$group
patient_order <- order(plot_data$group)
plot_data <- plot_data[patient_order , ]
# 4. Color setup - ensure we're using the actual taxa names
taxa_list <- setdiff(unique(as.character(plot_data$Taxa)), "other")
other_colors <- colorRampPalette(brewer.pal(12, "Set3"))(length(taxa_list))
fill_colours <- c("other" = "grey", setNames(other_colors, taxa_list))
# 5. Main plot with full legend
p_main_full <- ggplot(plot_data, aes(x = Patient, y = Abundance, fill = Taxa)) +
geom_bar(stat = "identity", width = 0.7) +
coord_flip() +
scale_fill_manual(values = fill_colours, name = "Taxa") +
labs(x = "Patient", y = "Proportion of Non-Human Reads") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
# 6. Extract the legend before removing it
legend <- cowplot::get_legend(p_main_full +
theme(legend.position = "right",
legend.text = element_text(size = 8)))
# 7. Remove legend from main plot
p_main <- p_main_full + theme(legend.position = "none")
# 8. Test result matrix
test_long_names <- c(
"MT_HR" = "RNA-seq\nHost\nResponse",
"MT_Tax" = "RNA-seq\nPathogen\nAbundance",
"Clin_HR" = "Clinical\nHost\nResponse",
"Clin_Tax" = "Clinical\nPathogen\nAbundance"
)
test_results <- data.frame(
Patient = factor(patients, levels = patients),
MT_HR = pred.df[patients, "RNA-Seq Host Response Cluster"],
MT_Tax = pred.df[patients, "RNA-Seq Pathogen Abundance"],
Clin_HR = pred.df[patients, "Clinical Host Response Score"],
Clin_Tax = pred.df[patients, "Clinical Pathogen Abundance"],
stringsAsFactors = FALSE
) %>%
reshape2::melt(id.vars = "Patient", variable.name = "Test", value.name = "Status")
p_matrix <- ggplot(test_results, aes(x = Test, y = Patient)) +
geom_text(aes(label = ifelse(Status == 1, "âœ“", "x"),
color = factor(Status)),
size = 4) +
scale_color_manual(values = c("0" = "red", "1" = "darkgreen")) +
scale_x_discrete(position = "top", labels = test_long_names) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9),
legend.position = "none"
)
# 9. Align and combine both plots
aligned_plots <- align_plots(p_main, p_matrix, align = "hv", axis = "lr")
main_matrix_plot <- plot_grid(
aligned_plots[[1]],
aligned_plots[[2]],
nrow = 1,
rel_widths = c(3, 3),
align = "h",
axis = "tb"
)
# 10. Return both combined plot and legend
return(list(
main_matrix_plot = main_matrix_plot,
legend = legend
))
}
# So the checkmarks show up in the plot:
showtext_auto()
# Generate main plot without legend
main_plot <- generate.urobiome.plot.with.matrix(
df_renormalized_subset,
incorrect_patients,
75000,
reads.meta.counts
)
# Print the main plot
print(main_plot$main_matrix_plot)
# Print the legend separately
grid::grid.newpage()
grid::grid.draw(main_plot$legend)
pred.df <- venn.df
provide.grouping <- function(MT_HR, MT_Tax, Clin_HR, Clin_Tax) {
comb <- paste0(MT_HR, MT_Tax, Clin_HR, Clin_Tax)
# Define meaningful labels for each combination
group_labels <- list(
"1111" = "All_Positive",
"0000" = "All_Negative",
"1110" = "Clin_Tax_Negative",
"1101" = "Clin_HR_Negative",
"1011" = "MT_Tax_Negative",
"0111" = "MT_HR_Negative",
"1100" = "Clin_Tax_HR_Negative",
"1010" = "MT_Tax_Clin_Tax_Negative",
"1001" = "MT_Tax_Clin_HR_Negative",
"0110" = "MT_HR_Clin_Tax_Negative",
"0101" = "MT_HR_Clin_HR_Negative",
"0011" = "MT_HR_MT_Tax_Negative",
"1000" = "Only_MT_HR_Positive",
"0100" = "Only_MT_Tax_Positive",
"0010" = "Only_Clin_HR_Positive",
"0001" = "Only_Clin_Tax_Positive"
)
# Return the appropriate label or NA if not found
return(group_labels[[comb]])
}
# Apply function to all rows, giving a string value for each
pred.df$group <- mapply(provide.grouping,
pred.df[ , 1],
pred.df[ , 2],
pred.df[ , 3],
pred.df[ , 4])
# Working with df_renormalized, FYI
incorrect_patients <- rownames(pred.df[pred.df$group != "All_Negative" &
pred.df$group != "All_Positive", ])
df_renormalized_subset <- df_renormalized[incorrect_patients , ]
# Function that will generate a urobiome plot on this new df
generate.urobiome.plot.with.matrix <- function(rpm, patients, rpm.threshold, metadata) {
require(ggplot2)
require(reshape2)
require(cowplot)
require(dplyr)
require(RColorBrewer)
# 1. Subset RPM matrix
rpm.subsetted <- rpm[patients, ]
# 2. Re-make the function but inputting
sum.above.thres <- function(rpm.df, rpm.threshold = 1000) {
# Initialize list to store results
result_list <- list()
for (i in seq_len(nrow(rpm.df))) {
patient_name <- rownames(rpm.df)[i]
current.row <- rpm.df[i, ]
# Keep taxa above threshold
patients.above <- unlist(current.row)[unlist(current.row) >= rpm.threshold]
sum.rpm.above <- sum(patients.above)
sum.rpm.below <- 1e6 - sum.rpm.above
# Add "other" category
patients.above <- c(patients.above, "other" = sum.rpm.below)
# Safety check
if (abs(sum(patients.above) - 1e6) > 1) stop("RPM must sum to 1 million!")
# Normalize to proportions
patients.above <- patients.above / sum(patients.above)
# Store as a data frame row
result_list[[patient_name]] <- as.data.frame(t(patients.above), check.names = FALSE)
}
# Combine all rows into a single data frame
result_df <- bind_rows(result_list, .id = "patient")
return(result_df)
}
stacked_bar_data <- sum.above.thres(rpm, rpm.threshold = rpm.threshold)
# 3. Melt into long dataframe for plotting
# stacked_bar_data <- stacked_bar_data %>%
#   rename_with(~ "Patient", .cols = "patient")  # rename 'patient' column to 'Patient'
plot_data <- stacked_bar_data %>%
rename_with(~ "Patient", .cols = "patient") %>%
reshape2::melt(id.vars = "Patient", variable.name = "Taxa", value.name = "Abundance") %>%
filter(!is.na(Abundance)) %>%
group_by(Patient) %>%
mutate(Abundance = Abundance / sum(Abundance)) %>%
ungroup()
temp_pred_df <- pred.df
temp_pred_df$Patient <- rownames(temp_pred_df)
plot_data <- plot_data %>%
left_join(temp_pred_df, by = "Patient")
# Reorder by pred.df$group
patient_order <- order(plot_data$group)
plot_data <- plot_data[patient_order , ]
View(plot_data)
# 4. Color setup - ensure we're using the actual taxa names
taxa_list <- setdiff(unique(as.character(plot_data$Taxa)), "other")
other_colors <- colorRampPalette(brewer.pal(12, "Set3"))(length(taxa_list))
fill_colours <- c("other" = "grey", setNames(other_colors, taxa_list))
# 5. Main plot with full legend
p_main_full <- ggplot(plot_data, aes(x = Patient, y = Abundance, fill = Taxa)) +
geom_bar(stat = "identity", width = 0.7) +
coord_flip() +
scale_fill_manual(values = fill_colours, name = "Taxa") +
labs(x = "Patient", y = "Proportion of Non-Human Reads") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
# 6. Extract the legend before removing it
legend <- cowplot::get_legend(p_main_full +
theme(legend.position = "right",
legend.text = element_text(size = 8)))
# 7. Remove legend from main plot
p_main <- p_main_full + theme(legend.position = "none")
# 8. Test result matrix
test_long_names <- c(
"MT_HR" = "RNA-seq\nHost\nResponse",
"MT_Tax" = "RNA-seq\nPathogen\nAbundance",
"Clin_HR" = "Clinical\nHost\nResponse",
"Clin_Tax" = "Clinical\nPathogen\nAbundance"
)
test_results <- data.frame(
Patient = factor(patients, levels = patients),
MT_HR = pred.df[patients, "RNA-Seq Host Response Cluster"],
MT_Tax = pred.df[patients, "RNA-Seq Pathogen Abundance"],
Clin_HR = pred.df[patients, "Clinical Host Response Score"],
Clin_Tax = pred.df[patients, "Clinical Pathogen Abundance"],
stringsAsFactors = FALSE
) %>%
reshape2::melt(id.vars = "Patient", variable.name = "Test", value.name = "Status")
p_matrix <- ggplot(test_results, aes(x = Test, y = Patient)) +
geom_text(aes(label = ifelse(Status == 1, "âœ“", "x"),
color = factor(Status)),
size = 4) +
scale_color_manual(values = c("0" = "red", "1" = "darkgreen")) +
scale_x_discrete(position = "top", labels = test_long_names) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9),
legend.position = "none"
)
# 9. Align and combine both plots
aligned_plots <- align_plots(p_main, p_matrix, align = "hv", axis = "lr")
main_matrix_plot <- plot_grid(
aligned_plots[[1]],
aligned_plots[[2]],
nrow = 1,
rel_widths = c(3, 3),
align = "h",
axis = "tb"
)
# 10. Return both combined plot and legend
return(list(
main_matrix_plot = main_matrix_plot,
legend = legend
))
}
# So the checkmarks show up in the plot:
showtext_auto()
# Generate main plot without legend
main_plot <- generate.urobiome.plot.with.matrix(
df_renormalized_subset,
incorrect_patients,
75000,
reads.meta.counts
)
# Print the main plot
print(main_plot$main_matrix_plot)
# Print the legend separately
grid::grid.newpage()
grid::grid.draw(main_plot$legend)
